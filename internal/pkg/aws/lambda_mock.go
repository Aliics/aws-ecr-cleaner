// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/aws/lambda.go

// Package aws is a generated GoMock package.
package aws

import (
	context "context"
	reflect "reflect"

	lambda "github.com/aws/aws-sdk-go-v2/service/lambda"
	gomock "github.com/golang/mock/gomock"
)

// MockLambdaClient is a mock of LambdaClient interface.
type MockLambdaClient struct {
	ctrl     *gomock.Controller
	recorder *MockLambdaClientMockRecorder
}

// MockLambdaClientMockRecorder is the mock recorder for MockLambdaClient.
type MockLambdaClientMockRecorder struct {
	mock *MockLambdaClient
}

// NewMockLambdaClient creates a new mock instance.
func NewMockLambdaClient(ctrl *gomock.Controller) *MockLambdaClient {
	mock := &MockLambdaClient{ctrl: ctrl}
	mock.recorder = &MockLambdaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLambdaClient) EXPECT() *MockLambdaClientMockRecorder {
	return m.recorder
}

// GetFunction mocks base method.
func (m *MockLambdaClient) GetFunction(ctx context.Context, params *lambda.GetFunctionInput, optFns ...func(*lambda.Options)) (*lambda.GetFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunction", varargs...)
	ret0, _ := ret[0].(*lambda.GetFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunction indicates an expected call of GetFunction.
func (mr *MockLambdaClientMockRecorder) GetFunction(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunction", reflect.TypeOf((*MockLambdaClient)(nil).GetFunction), varargs...)
}

// MockLambdaPaginators is a mock of LambdaPaginators interface.
type MockLambdaPaginators struct {
	ctrl     *gomock.Controller
	recorder *MockLambdaPaginatorsMockRecorder
}

// MockLambdaPaginatorsMockRecorder is the mock recorder for MockLambdaPaginators.
type MockLambdaPaginatorsMockRecorder struct {
	mock *MockLambdaPaginators
}

// NewMockLambdaPaginators creates a new mock instance.
func NewMockLambdaPaginators(ctrl *gomock.Controller) *MockLambdaPaginators {
	mock := &MockLambdaPaginators{ctrl: ctrl}
	mock.recorder = &MockLambdaPaginatorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLambdaPaginators) EXPECT() *MockLambdaPaginatorsMockRecorder {
	return m.recorder
}

// NewListFunctionsPaginator mocks base method.
func (m *MockLambdaPaginators) NewListFunctionsPaginator(params *lambda.ListFunctionsInput, optFns ...func(*lambda.ListFunctionsPaginatorOptions)) LambdaListFunctionsPaginator {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewListFunctionsPaginator", varargs...)
	ret0, _ := ret[0].(LambdaListFunctionsPaginator)
	return ret0
}

// NewListFunctionsPaginator indicates an expected call of NewListFunctionsPaginator.
func (mr *MockLambdaPaginatorsMockRecorder) NewListFunctionsPaginator(params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListFunctionsPaginator", reflect.TypeOf((*MockLambdaPaginators)(nil).NewListFunctionsPaginator), varargs...)
}

// MockLambdaListFunctionsPaginator is a mock of LambdaListFunctionsPaginator interface.
type MockLambdaListFunctionsPaginator struct {
	ctrl     *gomock.Controller
	recorder *MockLambdaListFunctionsPaginatorMockRecorder
}

// MockLambdaListFunctionsPaginatorMockRecorder is the mock recorder for MockLambdaListFunctionsPaginator.
type MockLambdaListFunctionsPaginatorMockRecorder struct {
	mock *MockLambdaListFunctionsPaginator
}

// NewMockLambdaListFunctionsPaginator creates a new mock instance.
func NewMockLambdaListFunctionsPaginator(ctrl *gomock.Controller) *MockLambdaListFunctionsPaginator {
	mock := &MockLambdaListFunctionsPaginator{ctrl: ctrl}
	mock.recorder = &MockLambdaListFunctionsPaginatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLambdaListFunctionsPaginator) EXPECT() *MockLambdaListFunctionsPaginatorMockRecorder {
	return m.recorder
}

// HasMorePages mocks base method.
func (m *MockLambdaListFunctionsPaginator) HasMorePages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMorePages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMorePages indicates an expected call of HasMorePages.
func (mr *MockLambdaListFunctionsPaginatorMockRecorder) HasMorePages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMorePages", reflect.TypeOf((*MockLambdaListFunctionsPaginator)(nil).HasMorePages))
}

// NextPage mocks base method.
func (m *MockLambdaListFunctionsPaginator) NextPage(ctx context.Context, optFns ...func(*lambda.Options)) (*lambda.ListFunctionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextPage", varargs...)
	ret0, _ := ret[0].(*lambda.ListFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockLambdaListFunctionsPaginatorMockRecorder) NextPage(ctx interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockLambdaListFunctionsPaginator)(nil).NextPage), varargs...)
}
