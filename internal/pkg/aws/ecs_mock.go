// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/aws/ecs.go

// Package aws is a generated GoMock package.
package aws

import (
	context "context"
	reflect "reflect"

	ecs "github.com/aws/aws-sdk-go-v2/service/ecs"
	gomock "github.com/golang/mock/gomock"
)

// MockEcsClient is a mock of EcsClient interface.
type MockEcsClient struct {
	ctrl     *gomock.Controller
	recorder *MockEcsClientMockRecorder
}

// MockEcsClientMockRecorder is the mock recorder for MockEcsClient.
type MockEcsClientMockRecorder struct {
	mock *MockEcsClient
}

// NewMockEcsClient creates a new mock instance.
func NewMockEcsClient(ctrl *gomock.Controller) *MockEcsClient {
	mock := &MockEcsClient{ctrl: ctrl}
	mock.recorder = &MockEcsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcsClient) EXPECT() *MockEcsClientMockRecorder {
	return m.recorder
}

// DescribeServices mocks base method.
func (m *MockEcsClient) DescribeServices(ctx context.Context, params *ecs.DescribeServicesInput, optFns ...func(*ecs.Options)) (*ecs.DescribeServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServices", varargs...)
	ret0, _ := ret[0].(*ecs.DescribeServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServices indicates an expected call of DescribeServices.
func (mr *MockEcsClientMockRecorder) DescribeServices(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServices", reflect.TypeOf((*MockEcsClient)(nil).DescribeServices), varargs...)
}

// DescribeTaskDefinition mocks base method.
func (m *MockEcsClient) DescribeTaskDefinition(ctx context.Context, params *ecs.DescribeTaskDefinitionInput, optFns ...func(*ecs.Options)) (*ecs.DescribeTaskDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTaskDefinition", varargs...)
	ret0, _ := ret[0].(*ecs.DescribeTaskDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTaskDefinition indicates an expected call of DescribeTaskDefinition.
func (mr *MockEcsClientMockRecorder) DescribeTaskDefinition(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTaskDefinition", reflect.TypeOf((*MockEcsClient)(nil).DescribeTaskDefinition), varargs...)
}

// MockEcsPaginators is a mock of EcsPaginators interface.
type MockEcsPaginators struct {
	ctrl     *gomock.Controller
	recorder *MockEcsPaginatorsMockRecorder
}

// MockEcsPaginatorsMockRecorder is the mock recorder for MockEcsPaginators.
type MockEcsPaginatorsMockRecorder struct {
	mock *MockEcsPaginators
}

// NewMockEcsPaginators creates a new mock instance.
func NewMockEcsPaginators(ctrl *gomock.Controller) *MockEcsPaginators {
	mock := &MockEcsPaginators{ctrl: ctrl}
	mock.recorder = &MockEcsPaginatorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcsPaginators) EXPECT() *MockEcsPaginatorsMockRecorder {
	return m.recorder
}

// NewListClustersPaginator mocks base method.
func (m *MockEcsPaginators) NewListClustersPaginator(params *ecs.ListClustersInput, optFns ...func(*ecs.ListClustersPaginatorOptions)) EcsListClustersPaginator {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewListClustersPaginator", varargs...)
	ret0, _ := ret[0].(EcsListClustersPaginator)
	return ret0
}

// NewListClustersPaginator indicates an expected call of NewListClustersPaginator.
func (mr *MockEcsPaginatorsMockRecorder) NewListClustersPaginator(params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListClustersPaginator", reflect.TypeOf((*MockEcsPaginators)(nil).NewListClustersPaginator), varargs...)
}

// NewListServicesPaginator mocks base method.
func (m *MockEcsPaginators) NewListServicesPaginator(params *ecs.ListServicesInput, optFns ...func(*ecs.ListServicesPaginatorOptions)) EcsListServicesPaginator {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewListServicesPaginator", varargs...)
	ret0, _ := ret[0].(EcsListServicesPaginator)
	return ret0
}

// NewListServicesPaginator indicates an expected call of NewListServicesPaginator.
func (mr *MockEcsPaginatorsMockRecorder) NewListServicesPaginator(params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListServicesPaginator", reflect.TypeOf((*MockEcsPaginators)(nil).NewListServicesPaginator), varargs...)
}

// MockEcsListClustersPaginator is a mock of EcsListClustersPaginator interface.
type MockEcsListClustersPaginator struct {
	ctrl     *gomock.Controller
	recorder *MockEcsListClustersPaginatorMockRecorder
}

// MockEcsListClustersPaginatorMockRecorder is the mock recorder for MockEcsListClustersPaginator.
type MockEcsListClustersPaginatorMockRecorder struct {
	mock *MockEcsListClustersPaginator
}

// NewMockEcsListClustersPaginator creates a new mock instance.
func NewMockEcsListClustersPaginator(ctrl *gomock.Controller) *MockEcsListClustersPaginator {
	mock := &MockEcsListClustersPaginator{ctrl: ctrl}
	mock.recorder = &MockEcsListClustersPaginatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcsListClustersPaginator) EXPECT() *MockEcsListClustersPaginatorMockRecorder {
	return m.recorder
}

// HasMorePages mocks base method.
func (m *MockEcsListClustersPaginator) HasMorePages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMorePages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMorePages indicates an expected call of HasMorePages.
func (mr *MockEcsListClustersPaginatorMockRecorder) HasMorePages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMorePages", reflect.TypeOf((*MockEcsListClustersPaginator)(nil).HasMorePages))
}

// NextPage mocks base method.
func (m *MockEcsListClustersPaginator) NextPage(ctx context.Context, optFns ...func(*ecs.Options)) (*ecs.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextPage", varargs...)
	ret0, _ := ret[0].(*ecs.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockEcsListClustersPaginatorMockRecorder) NextPage(ctx interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockEcsListClustersPaginator)(nil).NextPage), varargs...)
}

// MockEcsListServicesPaginator is a mock of EcsListServicesPaginator interface.
type MockEcsListServicesPaginator struct {
	ctrl     *gomock.Controller
	recorder *MockEcsListServicesPaginatorMockRecorder
}

// MockEcsListServicesPaginatorMockRecorder is the mock recorder for MockEcsListServicesPaginator.
type MockEcsListServicesPaginatorMockRecorder struct {
	mock *MockEcsListServicesPaginator
}

// NewMockEcsListServicesPaginator creates a new mock instance.
func NewMockEcsListServicesPaginator(ctrl *gomock.Controller) *MockEcsListServicesPaginator {
	mock := &MockEcsListServicesPaginator{ctrl: ctrl}
	mock.recorder = &MockEcsListServicesPaginatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcsListServicesPaginator) EXPECT() *MockEcsListServicesPaginatorMockRecorder {
	return m.recorder
}

// HasMorePages mocks base method.
func (m *MockEcsListServicesPaginator) HasMorePages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMorePages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMorePages indicates an expected call of HasMorePages.
func (mr *MockEcsListServicesPaginatorMockRecorder) HasMorePages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMorePages", reflect.TypeOf((*MockEcsListServicesPaginator)(nil).HasMorePages))
}

// NextPage mocks base method.
func (m *MockEcsListServicesPaginator) NextPage(ctx context.Context, optFns ...func(*ecs.Options)) (*ecs.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextPage", varargs...)
	ret0, _ := ret[0].(*ecs.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockEcsListServicesPaginatorMockRecorder) NextPage(ctx interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockEcsListServicesPaginator)(nil).NextPage), varargs...)
}
