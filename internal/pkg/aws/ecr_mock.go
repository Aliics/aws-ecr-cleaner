// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/aws/ecr.go

// Package aws is a generated GoMock package.
package aws

import (
	context "context"
	reflect "reflect"

	ecr "github.com/aws/aws-sdk-go-v2/service/ecr"
	gomock "github.com/golang/mock/gomock"
)

// MockEcrClient is a mock of EcrClient interface.
type MockEcrClient struct {
	ctrl     *gomock.Controller
	recorder *MockEcrClientMockRecorder
}

// MockEcrClientMockRecorder is the mock recorder for MockEcrClient.
type MockEcrClientMockRecorder struct {
	mock *MockEcrClient
}

// NewMockEcrClient creates a new mock instance.
func NewMockEcrClient(ctrl *gomock.Controller) *MockEcrClient {
	mock := &MockEcrClient{ctrl: ctrl}
	mock.recorder = &MockEcrClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcrClient) EXPECT() *MockEcrClientMockRecorder {
	return m.recorder
}

// BatchDeleteImage mocks base method.
func (m *MockEcrClient) BatchDeleteImage(ctx context.Context, params *ecr.BatchDeleteImageInput, optFns ...func(*ecr.Options)) (*ecr.BatchDeleteImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteImage", varargs...)
	ret0, _ := ret[0].(*ecr.BatchDeleteImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteImage indicates an expected call of BatchDeleteImage.
func (mr *MockEcrClientMockRecorder) BatchDeleteImage(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteImage", reflect.TypeOf((*MockEcrClient)(nil).BatchDeleteImage), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockEcrClient) ListTagsForResource(ctx context.Context, params *ecr.ListTagsForResourceInput, optFns ...func(*ecr.Options)) (*ecr.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*ecr.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockEcrClientMockRecorder) ListTagsForResource(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockEcrClient)(nil).ListTagsForResource), varargs...)
}

// MockEcrPaginators is a mock of EcrPaginators interface.
type MockEcrPaginators struct {
	ctrl     *gomock.Controller
	recorder *MockEcrPaginatorsMockRecorder
}

// MockEcrPaginatorsMockRecorder is the mock recorder for MockEcrPaginators.
type MockEcrPaginatorsMockRecorder struct {
	mock *MockEcrPaginators
}

// NewMockEcrPaginators creates a new mock instance.
func NewMockEcrPaginators(ctrl *gomock.Controller) *MockEcrPaginators {
	mock := &MockEcrPaginators{ctrl: ctrl}
	mock.recorder = &MockEcrPaginatorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcrPaginators) EXPECT() *MockEcrPaginatorsMockRecorder {
	return m.recorder
}

// NewDescribeImagesPaginator mocks base method.
func (m *MockEcrPaginators) NewDescribeImagesPaginator(params *ecr.DescribeImagesInput, optFns ...func(*ecr.DescribeImagesPaginatorOptions)) EcrDescribeImagesPaginator {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewDescribeImagesPaginator", varargs...)
	ret0, _ := ret[0].(EcrDescribeImagesPaginator)
	return ret0
}

// NewDescribeImagesPaginator indicates an expected call of NewDescribeImagesPaginator.
func (mr *MockEcrPaginatorsMockRecorder) NewDescribeImagesPaginator(params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDescribeImagesPaginator", reflect.TypeOf((*MockEcrPaginators)(nil).NewDescribeImagesPaginator), varargs...)
}

// NewDescribeRepositoriesPaginator mocks base method.
func (m *MockEcrPaginators) NewDescribeRepositoriesPaginator(params *ecr.DescribeRepositoriesInput, optFns ...func(*ecr.DescribeRepositoriesPaginatorOptions)) EcrDescribeRepositoriesPaginator {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewDescribeRepositoriesPaginator", varargs...)
	ret0, _ := ret[0].(EcrDescribeRepositoriesPaginator)
	return ret0
}

// NewDescribeRepositoriesPaginator indicates an expected call of NewDescribeRepositoriesPaginator.
func (mr *MockEcrPaginatorsMockRecorder) NewDescribeRepositoriesPaginator(params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDescribeRepositoriesPaginator", reflect.TypeOf((*MockEcrPaginators)(nil).NewDescribeRepositoriesPaginator), varargs...)
}

// MockEcrDescribeRepositoriesPaginator is a mock of EcrDescribeRepositoriesPaginator interface.
type MockEcrDescribeRepositoriesPaginator struct {
	ctrl     *gomock.Controller
	recorder *MockEcrDescribeRepositoriesPaginatorMockRecorder
}

// MockEcrDescribeRepositoriesPaginatorMockRecorder is the mock recorder for MockEcrDescribeRepositoriesPaginator.
type MockEcrDescribeRepositoriesPaginatorMockRecorder struct {
	mock *MockEcrDescribeRepositoriesPaginator
}

// NewMockEcrDescribeRepositoriesPaginator creates a new mock instance.
func NewMockEcrDescribeRepositoriesPaginator(ctrl *gomock.Controller) *MockEcrDescribeRepositoriesPaginator {
	mock := &MockEcrDescribeRepositoriesPaginator{ctrl: ctrl}
	mock.recorder = &MockEcrDescribeRepositoriesPaginatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcrDescribeRepositoriesPaginator) EXPECT() *MockEcrDescribeRepositoriesPaginatorMockRecorder {
	return m.recorder
}

// HasMorePages mocks base method.
func (m *MockEcrDescribeRepositoriesPaginator) HasMorePages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMorePages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMorePages indicates an expected call of HasMorePages.
func (mr *MockEcrDescribeRepositoriesPaginatorMockRecorder) HasMorePages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMorePages", reflect.TypeOf((*MockEcrDescribeRepositoriesPaginator)(nil).HasMorePages))
}

// NextPage mocks base method.
func (m *MockEcrDescribeRepositoriesPaginator) NextPage(ctx context.Context, optFns ...func(*ecr.Options)) (*ecr.DescribeRepositoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextPage", varargs...)
	ret0, _ := ret[0].(*ecr.DescribeRepositoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockEcrDescribeRepositoriesPaginatorMockRecorder) NextPage(ctx interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockEcrDescribeRepositoriesPaginator)(nil).NextPage), varargs...)
}

// MockEcrDescribeImagesPaginator is a mock of EcrDescribeImagesPaginator interface.
type MockEcrDescribeImagesPaginator struct {
	ctrl     *gomock.Controller
	recorder *MockEcrDescribeImagesPaginatorMockRecorder
}

// MockEcrDescribeImagesPaginatorMockRecorder is the mock recorder for MockEcrDescribeImagesPaginator.
type MockEcrDescribeImagesPaginatorMockRecorder struct {
	mock *MockEcrDescribeImagesPaginator
}

// NewMockEcrDescribeImagesPaginator creates a new mock instance.
func NewMockEcrDescribeImagesPaginator(ctrl *gomock.Controller) *MockEcrDescribeImagesPaginator {
	mock := &MockEcrDescribeImagesPaginator{ctrl: ctrl}
	mock.recorder = &MockEcrDescribeImagesPaginatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcrDescribeImagesPaginator) EXPECT() *MockEcrDescribeImagesPaginatorMockRecorder {
	return m.recorder
}

// HasMorePages mocks base method.
func (m *MockEcrDescribeImagesPaginator) HasMorePages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMorePages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMorePages indicates an expected call of HasMorePages.
func (mr *MockEcrDescribeImagesPaginatorMockRecorder) HasMorePages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMorePages", reflect.TypeOf((*MockEcrDescribeImagesPaginator)(nil).HasMorePages))
}

// NextPage mocks base method.
func (m *MockEcrDescribeImagesPaginator) NextPage(ctx context.Context, optFns ...func(*ecr.Options)) (*ecr.DescribeImagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextPage", varargs...)
	ret0, _ := ret[0].(*ecr.DescribeImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockEcrDescribeImagesPaginatorMockRecorder) NextPage(ctx interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockEcrDescribeImagesPaginator)(nil).NextPage), varargs...)
}
